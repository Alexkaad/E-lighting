security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
       user_provider:
           id: App\Security\UserProvider


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

#        validate:
#          pattern: ^/api/validate-jwt
#          stateless: true
#          security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                username_path: email #pour indiquer que la requête de login attends un champ email
                # plûtot que username

        api:
          pattern : ^/api
          stateless : true
          jwt: ~
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

       - { path: ^/api/user, methods: 'POST', roles: PUBLIC_ACCESS }
       - { path: ^/api/creator/add, methods: 'POST', roles: PUBLIC_ACCESS}
       - { path: ^/api/login, roles: PUBLIC_ACCESS }
       - { path: ^/api/image_entity, methods: 'POST', roles: PUBLIC_ACCESS, }
       - { path: ^/api/product/add, methods: 'POST', roles: PUBLIC_ACCESS}
       - { path: ^/api/product/getAll, methods: 'GET', roles: PUBLIC_ACCESS}
       - { path: ^/api/images, methods: 'POST',roles: PUBLIC_ACCESS}
       - { path: ^/api/brand/add, methods: 'POST', roles: PUBLIC_ACCESS}
       - { path: ^/api/creator/add, methods: 'POST', roles: PUBLIC_ACCESS}
       - { path: ^/api/category/brands/view, methods: 'GET', roles: PUBLIC_ACCESS}
       - { path: ^/api/user, methods: 'GET', roles: ROLE_USER}
       - { path: ^/api/category, methods: 'POST'}
       - { path: ^/api/category/put/, methods: 'PUT' }
       - { path: ^/api/category/all, methods: 'GET'}
       - { path: ^/api/category/, methods: 'GET'}
       - { path: ^/api/category/one/, methods: 'GET' }
       - { path: ^/api/category/remove/, methods: 'DELETE' }
       - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
